
Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000193c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001a48  08001a48  00002a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a6c  08001a6c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001a6c  08001a6c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001a6c  08001a6c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a6c  08001a6c  00002a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a70  08001a70  00002a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a74  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001a80  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001a80  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002932  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e44  00000000  00000000  00005967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  000067b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c7  00000000  00000000  00006b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015672  00000000  00000000  00006e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004aee  00000000  00000000  0001c4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079c41  00000000  00000000  00020fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009abf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d80  00000000  00000000  0009ac3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0009b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a30 	.word	0x08001a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a30 	.word	0x08001a30

0800014c <display7SEG1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display7SEG1(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    switch(num)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG1+0x310>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display7SEG1+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
    {
        case 0:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	@ (8000464 <display7SEG1+0x318>)
 8000192:	f001 f82b 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	@ (8000464 <display7SEG1+0x318>)
 800019c:	f001 f826 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	@ (8000464 <display7SEG1+0x318>)
 80001a6:	f001 f821 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	@ (8000464 <display7SEG1+0x318>)
 80001b0:	f001 f81c 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	@ (8000464 <display7SEG1+0x318>)
 80001ba:	f001 f817 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	@ (8000464 <display7SEG1+0x318>)
 80001c4:	f001 f812 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	@ 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	@ (8000464 <display7SEG1+0x318>)
 80001ce:	f001 f80d 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80001d2:	e143      	b.n	800045c <display7SEG1+0x310>
        }
        case 1:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	@ (8000464 <display7SEG1+0x318>)
 80001da:	f001 f807 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	@ (8000464 <display7SEG1+0x318>)
 80001e4:	f001 f802 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	@ (8000464 <display7SEG1+0x318>)
 80001ee:	f000 fffd 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	@ (8000464 <display7SEG1+0x318>)
 80001f8:	f000 fff8 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	@ (8000464 <display7SEG1+0x318>)
 8000202:	f000 fff3 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	@ (8000464 <display7SEG1+0x318>)
 800020c:	f000 ffee 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	@ 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	@ (8000464 <display7SEG1+0x318>)
 8000216:	f000 ffe9 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 800021a:	e11f      	b.n	800045c <display7SEG1+0x310>
        }
        case 2:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	@ (8000464 <display7SEG1+0x318>)
 8000222:	f000 ffe3 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	@ (8000464 <display7SEG1+0x318>)
 800022c:	f000 ffde 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	@ (8000464 <display7SEG1+0x318>)
 8000236:	f000 ffd9 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	@ (8000464 <display7SEG1+0x318>)
 8000240:	f000 ffd4 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	@ (8000464 <display7SEG1+0x318>)
 800024a:	f000 ffcf 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	@ (8000464 <display7SEG1+0x318>)
 8000254:	f000 ffca 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	@ 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	@ (8000464 <display7SEG1+0x318>)
 800025e:	f000 ffc5 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 8000262:	e0fb      	b.n	800045c <display7SEG1+0x310>
        }
        case 3:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	@ (8000464 <display7SEG1+0x318>)
 800026a:	f000 ffbf 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	@ (8000464 <display7SEG1+0x318>)
 8000274:	f000 ffba 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	@ (8000464 <display7SEG1+0x318>)
 800027e:	f000 ffb5 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	@ (8000464 <display7SEG1+0x318>)
 8000288:	f000 ffb0 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	@ (8000464 <display7SEG1+0x318>)
 8000292:	f000 ffab 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	@ (8000464 <display7SEG1+0x318>)
 800029c:	f000 ffa6 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	@ 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	@ (8000464 <display7SEG1+0x318>)
 80002a6:	f000 ffa1 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80002aa:	e0d7      	b.n	800045c <display7SEG1+0x310>
        }
        case 4:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	@ (8000464 <display7SEG1+0x318>)
 80002b2:	f000 ff9b 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	@ (8000464 <display7SEG1+0x318>)
 80002bc:	f000 ff96 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	@ (8000464 <display7SEG1+0x318>)
 80002c6:	f000 ff91 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	@ (8000464 <display7SEG1+0x318>)
 80002d0:	f000 ff8c 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	@ (8000464 <display7SEG1+0x318>)
 80002da:	f000 ff87 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	@ (8000464 <display7SEG1+0x318>)
 80002e4:	f000 ff82 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	@ 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	@ (8000464 <display7SEG1+0x318>)
 80002ee:	f000 ff7d 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80002f2:	e0b3      	b.n	800045c <display7SEG1+0x310>
        }
        case 5:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	@ (8000464 <display7SEG1+0x318>)
 80002fa:	f000 ff77 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	@ (8000464 <display7SEG1+0x318>)
 8000304:	f000 ff72 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	@ (8000464 <display7SEG1+0x318>)
 800030e:	f000 ff6d 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	@ (8000464 <display7SEG1+0x318>)
 8000318:	f000 ff68 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	@ (8000464 <display7SEG1+0x318>)
 8000322:	f000 ff63 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	@ (8000464 <display7SEG1+0x318>)
 800032c:	f000 ff5e 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	@ 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	@ (8000464 <display7SEG1+0x318>)
 8000336:	f000 ff59 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 800033a:	e08f      	b.n	800045c <display7SEG1+0x310>
        }
        case 6:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	@ (8000464 <display7SEG1+0x318>)
 8000342:	f000 ff53 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	@ (8000464 <display7SEG1+0x318>)
 800034c:	f000 ff4e 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	@ (8000464 <display7SEG1+0x318>)
 8000356:	f000 ff49 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	@ (8000464 <display7SEG1+0x318>)
 8000360:	f000 ff44 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	@ (8000464 <display7SEG1+0x318>)
 800036a:	f000 ff3f 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	@ (8000464 <display7SEG1+0x318>)
 8000374:	f000 ff3a 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	@ 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	@ (8000464 <display7SEG1+0x318>)
 800037e:	f000 ff35 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 8000382:	e06b      	b.n	800045c <display7SEG1+0x310>
        }
        case 7:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	@ (8000464 <display7SEG1+0x318>)
 800038a:	f000 ff2f 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	@ (8000464 <display7SEG1+0x318>)
 8000394:	f000 ff2a 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	@ (8000464 <display7SEG1+0x318>)
 800039e:	f000 ff25 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	@ (8000464 <display7SEG1+0x318>)
 80003a8:	f000 ff20 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	@ (8000464 <display7SEG1+0x318>)
 80003b2:	f000 ff1b 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	@ (8000464 <display7SEG1+0x318>)
 80003bc:	f000 ff16 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	@ 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	@ (8000464 <display7SEG1+0x318>)
 80003c6:	f000 ff11 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80003ca:	e047      	b.n	800045c <display7SEG1+0x310>
        }
        case 8:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	@ (8000464 <display7SEG1+0x318>)
 80003d2:	f000 ff0b 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	@ (8000464 <display7SEG1+0x318>)
 80003dc:	f000 ff06 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	@ (8000464 <display7SEG1+0x318>)
 80003e6:	f000 ff01 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	@ (8000464 <display7SEG1+0x318>)
 80003f0:	f000 fefc 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	@ (8000464 <display7SEG1+0x318>)
 80003fa:	f000 fef7 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	@ (8000464 <display7SEG1+0x318>)
 8000404:	f000 fef2 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	@ 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	@ (8000464 <display7SEG1+0x318>)
 800040e:	f000 feed 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 8000412:	e023      	b.n	800045c <display7SEG1+0x310>
        }
        case 9:
        {
            HAL_GPIO_WritePin(GPIOB, A_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4812      	ldr	r0, [pc, #72]	@ (8000464 <display7SEG1+0x318>)
 800041a:	f000 fee7 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, B_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4810      	ldr	r0, [pc, #64]	@ (8000464 <display7SEG1+0x318>)
 8000424:	f000 fee2 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, C_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480d      	ldr	r0, [pc, #52]	@ (8000464 <display7SEG1+0x318>)
 800042e:	f000 fedd 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, D_Pin, RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480b      	ldr	r0, [pc, #44]	@ (8000464 <display7SEG1+0x318>)
 8000438:	f000 fed8 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, E_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4808      	ldr	r0, [pc, #32]	@ (8000464 <display7SEG1+0x318>)
 8000442:	f000 fed3 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, F_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <display7SEG1+0x318>)
 800044c:	f000 fece 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, G_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	@ 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	@ (8000464 <display7SEG1+0x318>)
 8000456:	f000 fec9 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 800045a:	bf00      	nop
        }
    }
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <display7SEG2>:

void display7SEG2(int num)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
    switch(num)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b09      	cmp	r3, #9
 8000474:	f200 81c9 	bhi.w	800080a <display7SEG2+0x3a2>
 8000478:	a201      	add	r2, pc, #4	@ (adr r2, 8000480 <display7SEG2+0x18>)
 800047a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047e:	bf00      	nop
 8000480:	080004a9 	.word	0x080004a9
 8000484:	080004ff 	.word	0x080004ff
 8000488:	08000555 	.word	0x08000555
 800048c:	080005ab 	.word	0x080005ab
 8000490:	08000601 	.word	0x08000601
 8000494:	08000657 	.word	0x08000657
 8000498:	080006ad 	.word	0x080006ad
 800049c:	08000703 	.word	0x08000703
 80004a0:	08000759 	.word	0x08000759
 80004a4:	080007b5 	.word	0x080007b5
    {
        case 0:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ae:	48c0      	ldr	r0, [pc, #768]	@ (80007b0 <display7SEG2+0x348>)
 80004b0:	f000 fe9c 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004ba:	48bd      	ldr	r0, [pc, #756]	@ (80007b0 <display7SEG2+0x348>)
 80004bc:	f000 fe96 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004c6:	48ba      	ldr	r0, [pc, #744]	@ (80007b0 <display7SEG2+0x348>)
 80004c8:	f000 fe90 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004d2:	48b7      	ldr	r0, [pc, #732]	@ (80007b0 <display7SEG2+0x348>)
 80004d4:	f000 fe8a 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004de:	48b4      	ldr	r0, [pc, #720]	@ (80007b0 <display7SEG2+0x348>)
 80004e0:	f000 fe84 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004ea:	48b1      	ldr	r0, [pc, #708]	@ (80007b0 <display7SEG2+0x348>)
 80004ec:	f000 fe7e 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004f6:	48ae      	ldr	r0, [pc, #696]	@ (80007b0 <display7SEG2+0x348>)
 80004f8:	f000 fe78 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80004fc:	e185      	b.n	800080a <display7SEG2+0x3a2>
        }
        case 1:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000504:	48aa      	ldr	r0, [pc, #680]	@ (80007b0 <display7SEG2+0x348>)
 8000506:	f000 fe71 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000510:	48a7      	ldr	r0, [pc, #668]	@ (80007b0 <display7SEG2+0x348>)
 8000512:	f000 fe6b 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800051c:	48a4      	ldr	r0, [pc, #656]	@ (80007b0 <display7SEG2+0x348>)
 800051e:	f000 fe65 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, SET);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000528:	48a1      	ldr	r0, [pc, #644]	@ (80007b0 <display7SEG2+0x348>)
 800052a:	f000 fe5f 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000534:	489e      	ldr	r0, [pc, #632]	@ (80007b0 <display7SEG2+0x348>)
 8000536:	f000 fe59 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000540:	489b      	ldr	r0, [pc, #620]	@ (80007b0 <display7SEG2+0x348>)
 8000542:	f000 fe53 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800054c:	4898      	ldr	r0, [pc, #608]	@ (80007b0 <display7SEG2+0x348>)
 800054e:	f000 fe4d 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 8000552:	e15a      	b.n	800080a <display7SEG2+0x3a2>
        }
        case 2:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800055a:	4895      	ldr	r0, [pc, #596]	@ (80007b0 <display7SEG2+0x348>)
 800055c:	f000 fe46 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000566:	4892      	ldr	r0, [pc, #584]	@ (80007b0 <display7SEG2+0x348>)
 8000568:	f000 fe40 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000572:	488f      	ldr	r0, [pc, #572]	@ (80007b0 <display7SEG2+0x348>)
 8000574:	f000 fe3a 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057e:	488c      	ldr	r0, [pc, #560]	@ (80007b0 <display7SEG2+0x348>)
 8000580:	f000 fe34 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058a:	4889      	ldr	r0, [pc, #548]	@ (80007b0 <display7SEG2+0x348>)
 800058c:	f000 fe2e 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000596:	4886      	ldr	r0, [pc, #536]	@ (80007b0 <display7SEG2+0x348>)
 8000598:	f000 fe28 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005a2:	4883      	ldr	r0, [pc, #524]	@ (80007b0 <display7SEG2+0x348>)
 80005a4:	f000 fe22 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80005a8:	e12f      	b.n	800080a <display7SEG2+0x3a2>
        }
        case 3:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b0:	487f      	ldr	r0, [pc, #508]	@ (80007b0 <display7SEG2+0x348>)
 80005b2:	f000 fe1b 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005bc:	487c      	ldr	r0, [pc, #496]	@ (80007b0 <display7SEG2+0x348>)
 80005be:	f000 fe15 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005c8:	4879      	ldr	r0, [pc, #484]	@ (80007b0 <display7SEG2+0x348>)
 80005ca:	f000 fe0f 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d4:	4876      	ldr	r0, [pc, #472]	@ (80007b0 <display7SEG2+0x348>)
 80005d6:	f000 fe09 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e0:	4873      	ldr	r0, [pc, #460]	@ (80007b0 <display7SEG2+0x348>)
 80005e2:	f000 fe03 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ec:	4870      	ldr	r0, [pc, #448]	@ (80007b0 <display7SEG2+0x348>)
 80005ee:	f000 fdfd 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005f8:	486d      	ldr	r0, [pc, #436]	@ (80007b0 <display7SEG2+0x348>)
 80005fa:	f000 fdf7 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80005fe:	e104      	b.n	800080a <display7SEG2+0x3a2>
        }
        case 4:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000606:	486a      	ldr	r0, [pc, #424]	@ (80007b0 <display7SEG2+0x348>)
 8000608:	f000 fdf0 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000612:	4867      	ldr	r0, [pc, #412]	@ (80007b0 <display7SEG2+0x348>)
 8000614:	f000 fdea 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800061e:	4864      	ldr	r0, [pc, #400]	@ (80007b0 <display7SEG2+0x348>)
 8000620:	f000 fde4 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800062a:	4861      	ldr	r0, [pc, #388]	@ (80007b0 <display7SEG2+0x348>)
 800062c:	f000 fdde 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000636:	485e      	ldr	r0, [pc, #376]	@ (80007b0 <display7SEG2+0x348>)
 8000638:	f000 fdd8 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000642:	485b      	ldr	r0, [pc, #364]	@ (80007b0 <display7SEG2+0x348>)
 8000644:	f000 fdd2 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064e:	4858      	ldr	r0, [pc, #352]	@ (80007b0 <display7SEG2+0x348>)
 8000650:	f000 fdcc 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 8000654:	e0d9      	b.n	800080a <display7SEG2+0x3a2>
        }
        case 5:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800065c:	4854      	ldr	r0, [pc, #336]	@ (80007b0 <display7SEG2+0x348>)
 800065e:	f000 fdc5 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000668:	4851      	ldr	r0, [pc, #324]	@ (80007b0 <display7SEG2+0x348>)
 800066a:	f000 fdbf 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000674:	484e      	ldr	r0, [pc, #312]	@ (80007b0 <display7SEG2+0x348>)
 8000676:	f000 fdb9 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000680:	484b      	ldr	r0, [pc, #300]	@ (80007b0 <display7SEG2+0x348>)
 8000682:	f000 fdb3 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068c:	4848      	ldr	r0, [pc, #288]	@ (80007b0 <display7SEG2+0x348>)
 800068e:	f000 fdad 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000698:	4845      	ldr	r0, [pc, #276]	@ (80007b0 <display7SEG2+0x348>)
 800069a:	f000 fda7 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006a4:	4842      	ldr	r0, [pc, #264]	@ (80007b0 <display7SEG2+0x348>)
 80006a6:	f000 fda1 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80006aa:	e0ae      	b.n	800080a <display7SEG2+0x3a2>
        }
        case 6:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b2:	483f      	ldr	r0, [pc, #252]	@ (80007b0 <display7SEG2+0x348>)
 80006b4:	f000 fd9a 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006be:	483c      	ldr	r0, [pc, #240]	@ (80007b0 <display7SEG2+0x348>)
 80006c0:	f000 fd94 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ca:	4839      	ldr	r0, [pc, #228]	@ (80007b0 <display7SEG2+0x348>)
 80006cc:	f000 fd8e 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d6:	4836      	ldr	r0, [pc, #216]	@ (80007b0 <display7SEG2+0x348>)
 80006d8:	f000 fd88 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e2:	4833      	ldr	r0, [pc, #204]	@ (80007b0 <display7SEG2+0x348>)
 80006e4:	f000 fd82 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ee:	4830      	ldr	r0, [pc, #192]	@ (80007b0 <display7SEG2+0x348>)
 80006f0:	f000 fd7c 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006fa:	482d      	ldr	r0, [pc, #180]	@ (80007b0 <display7SEG2+0x348>)
 80006fc:	f000 fd76 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 8000700:	e083      	b.n	800080a <display7SEG2+0x3a2>
        }
        case 7:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000708:	4829      	ldr	r0, [pc, #164]	@ (80007b0 <display7SEG2+0x348>)
 800070a:	f000 fd6f 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000714:	4826      	ldr	r0, [pc, #152]	@ (80007b0 <display7SEG2+0x348>)
 8000716:	f000 fd69 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000720:	4823      	ldr	r0, [pc, #140]	@ (80007b0 <display7SEG2+0x348>)
 8000722:	f000 fd63 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800072c:	4820      	ldr	r0, [pc, #128]	@ (80007b0 <display7SEG2+0x348>)
 800072e:	f000 fd5d 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000738:	481d      	ldr	r0, [pc, #116]	@ (80007b0 <display7SEG2+0x348>)
 800073a:	f000 fd57 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, SET);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000744:	481a      	ldr	r0, [pc, #104]	@ (80007b0 <display7SEG2+0x348>)
 8000746:	f000 fd51 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000750:	4817      	ldr	r0, [pc, #92]	@ (80007b0 <display7SEG2+0x348>)
 8000752:	f000 fd4b 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 8000756:	e058      	b.n	800080a <display7SEG2+0x3a2>
        }
        case 8:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800075e:	4814      	ldr	r0, [pc, #80]	@ (80007b0 <display7SEG2+0x348>)
 8000760:	f000 fd44 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076a:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <display7SEG2+0x348>)
 800076c:	f000 fd3e 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <display7SEG2+0x348>)
 8000778:	f000 fd38 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000782:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <display7SEG2+0x348>)
 8000784:	f000 fd32 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800078e:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <display7SEG2+0x348>)
 8000790:	f000 fd2c 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <display7SEG2+0x348>)
 800079c:	f000 fd26 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a6:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <display7SEG2+0x348>)
 80007a8:	f000 fd20 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 80007ac:	e02d      	b.n	800080a <display7SEG2+0x3a2>
 80007ae:	bf00      	nop
 80007b0:	40010800 	.word	0x40010800
        }
        case 9:
        {
            HAL_GPIO_WritePin(GPIOA, A2_Pin, RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ba:	4816      	ldr	r0, [pc, #88]	@ (8000814 <display7SEG2+0x3ac>)
 80007bc:	f000 fd16 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, B2_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007c6:	4813      	ldr	r0, [pc, #76]	@ (8000814 <display7SEG2+0x3ac>)
 80007c8:	f000 fd10 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d2:	4810      	ldr	r0, [pc, #64]	@ (8000814 <display7SEG2+0x3ac>)
 80007d4:	f000 fd0a 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D2_Pin, RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007de:	480d      	ldr	r0, [pc, #52]	@ (8000814 <display7SEG2+0x3ac>)
 80007e0:	f000 fd04 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E2_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ea:	480a      	ldr	r0, [pc, #40]	@ (8000814 <display7SEG2+0x3ac>)
 80007ec:	f000 fcfe 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, F2_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <display7SEG2+0x3ac>)
 80007f8:	f000 fcf8 	bl	80011ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, G2_Pin, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <display7SEG2+0x3ac>)
 8000804:	f000 fcf2 	bl	80011ec <HAL_GPIO_WritePin>
            break;
 8000808:	bf00      	nop
        }
    }
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40010800 	.word	0x40010800

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 f9ff 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f8eb 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f925 	bl	8000a74 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 10;
 800082a:	230a      	movs	r3, #10
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
      int count1 = 5;
 800082e:	2305      	movs	r3, #5
 8000830:	623b      	str	r3, [r7, #32]
      int count2 = 3;
 8000832:	2303      	movs	r3, #3
 8000834:	61fb      	str	r3, [r7, #28]
      int red1 = 0, yellow1 = 0, green1 = 0, red2 = 0, yellow2 = 0, green2 = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
      while(1)
      {
          /* USER CODE END WHILE */

          /* USER CODE BEGIN 3 */
          if(count == 10)
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	2b0a      	cmp	r3, #10
 8000852:	d12d      	bne.n	80008b0 <main+0x98>
          {
              red1 = green2 = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	61bb      	str	r3, [r7, #24]
              red2 = yellow1 = green1 = yellow2 = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	60fb      	str	r3, [r7, #12]

              HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2120      	movs	r1, #32
 8000870:	4860      	ldr	r0, [pc, #384]	@ (80009f4 <main+0x1dc>)
 8000872:	f000 fcbb 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2140      	movs	r1, #64	@ 0x40
 800087a:	485e      	ldr	r0, [pc, #376]	@ (80009f4 <main+0x1dc>)
 800087c:	f000 fcb6 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	485b      	ldr	r0, [pc, #364]	@ (80009f4 <main+0x1dc>)
 8000886:	f000 fcb1 	bl	80011ec <HAL_GPIO_WritePin>

              HAL_GPIO_WritePin(GPIOB, LED_RED2_Pin, SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000890:	4859      	ldr	r0, [pc, #356]	@ (80009f8 <main+0x1e0>)
 8000892:	f000 fcab 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, LED_YELLOW2_Pin, SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	4856      	ldr	r0, [pc, #344]	@ (80009f8 <main+0x1e0>)
 800089e:	f000 fca5 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, LED_GREEN2_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008a8:	4853      	ldr	r0, [pc, #332]	@ (80009f8 <main+0x1e0>)
 80008aa:	f000 fc9f 	bl	80011ec <HAL_GPIO_WritePin>
 80008ae:	e064      	b.n	800097a <main+0x162>
          }
          else if(count == 7)
 80008b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008b2:	2b07      	cmp	r3, #7
 80008b4:	d118      	bne.n	80008e8 <main+0xd0>
          {
              yellow2 = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
              red2 = green2 = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]
              HAL_GPIO_WritePin(GPIOB, LED_RED2_Pin, SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c8:	484b      	ldr	r0, [pc, #300]	@ (80009f8 <main+0x1e0>)
 80008ca:	f000 fc8f 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, LED_YELLOW2_Pin, RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d4:	4848      	ldr	r0, [pc, #288]	@ (80009f8 <main+0x1e0>)
 80008d6:	f000 fc89 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, LED_GREEN2_Pin, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e0:	4845      	ldr	r0, [pc, #276]	@ (80009f8 <main+0x1e0>)
 80008e2:	f000 fc83 	bl	80011ec <HAL_GPIO_WritePin>
 80008e6:	e048      	b.n	800097a <main+0x162>
          }
          else if(count == 5)
 80008e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d12d      	bne.n	800094a <main+0x132>
          {
              green1 = red2 = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	613b      	str	r3, [r7, #16]
              red1 = yellow1 = yellow2 = green2 = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	61bb      	str	r3, [r7, #24]
              HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2140      	movs	r1, #64	@ 0x40
 800090a:	483a      	ldr	r0, [pc, #232]	@ (80009f4 <main+0x1dc>)
 800090c:	f000 fc6e 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2120      	movs	r1, #32
 8000914:	4837      	ldr	r0, [pc, #220]	@ (80009f4 <main+0x1dc>)
 8000916:	f000 fc69 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	4835      	ldr	r0, [pc, #212]	@ (80009f4 <main+0x1dc>)
 8000920:	f000 fc64 	bl	80011ec <HAL_GPIO_WritePin>

              HAL_GPIO_WritePin(GPIOB, LED_YELLOW2_Pin, SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092a:	4833      	ldr	r0, [pc, #204]	@ (80009f8 <main+0x1e0>)
 800092c:	f000 fc5e 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, LED_RED2_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000936:	4830      	ldr	r0, [pc, #192]	@ (80009f8 <main+0x1e0>)
 8000938:	f000 fc58 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, LED_GREEN2_Pin, SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000942:	482d      	ldr	r0, [pc, #180]	@ (80009f8 <main+0x1e0>)
 8000944:	f000 fc52 	bl	80011ec <HAL_GPIO_WritePin>
 8000948:	e017      	b.n	800097a <main+0x162>
          }
          else if(count == 2)
 800094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094c:	2b02      	cmp	r3, #2
 800094e:	d114      	bne.n	800097a <main+0x162>
          {
              yellow1 = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
              red1 = green1 = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	61bb      	str	r3, [r7, #24]

              HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2140      	movs	r1, #64	@ 0x40
 8000960:	4824      	ldr	r0, [pc, #144]	@ (80009f4 <main+0x1dc>)
 8000962:	f000 fc43 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2120      	movs	r1, #32
 800096a:	4822      	ldr	r0, [pc, #136]	@ (80009f4 <main+0x1dc>)
 800096c:	f000 fc3e 	bl	80011ec <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2180      	movs	r1, #128	@ 0x80
 8000974:	481f      	ldr	r0, [pc, #124]	@ (80009f4 <main+0x1dc>)
 8000976:	f000 fc39 	bl	80011ec <HAL_GPIO_WritePin>
          }

          // display7SEG1(count--);
          count--;
 800097a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097c:	3b01      	subs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
           display7SEG1(count1--);
 8000980:	6a3b      	ldr	r3, [r7, #32]
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	623a      	str	r2, [r7, #32]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fbe0 	bl	800014c <display7SEG1>
           display7SEG2(count2--);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	1e5a      	subs	r2, r3, #1
 8000990:	61fa      	str	r2, [r7, #28]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fd68 	bl	8000468 <display7SEG2>
           if(count1 == 0)
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10e      	bne.n	80009bc <main+0x1a4>
           {
               if(red1)
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <main+0x190>
                   count1 = 3;
 80009a4:	2303      	movs	r3, #3
 80009a6:	623b      	str	r3, [r7, #32]
               if(green1)
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <main+0x19a>
                   count1 = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
               if(yellow1)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <main+0x1a4>
                   count1 = 5;
 80009b8:	2305      	movs	r3, #5
 80009ba:	623b      	str	r3, [r7, #32]
           }

           if(count2 == 0)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10e      	bne.n	80009e0 <main+0x1c8>
           {
               if(red2)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <main+0x1b4>
                   count2 = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	61fb      	str	r3, [r7, #28]
               if(green2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <main+0x1be>
                   count2 = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
               if(yellow2)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <main+0x1c8>
                   count2 = 5;
 80009dc:	2305      	movs	r3, #5
 80009de:	61fb      	str	r3, [r7, #28]
           }
          if(count == 0)
 80009e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d101      	bne.n	80009ea <main+0x1d2>
              count = 10;
 80009e6:	230a      	movs	r3, #10
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
          HAL_Delay(1000);
 80009ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ee:	f000 f979 	bl	8000ce4 <HAL_Delay>
          if(count == 10)
 80009f2:	e72c      	b.n	800084e <main+0x36>
 80009f4:	40010800 	.word	0x40010800
 80009f8:	40010c00 	.word	0x40010c00

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b090      	sub	sp, #64	@ 0x40
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	2228      	movs	r2, #40	@ 0x28
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 ffe4 	bl	80019d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a22:	2301      	movs	r3, #1
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a26:	2310      	movs	r3, #16
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2e:	f107 0318 	add.w	r3, r7, #24
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fbf2 	bl	800121c <HAL_RCC_OscConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a3e:	f000 f86f 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a42:	230f      	movs	r3, #15
 8000a44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fe60 	bl	8001720 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a66:	f000 f85b 	bl	8000b20 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3740      	adds	r7, #64	@ 0x40
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <MX_GPIO_Init+0xa0>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	@ (8000b14 <MX_GPIO_Init+0xa0>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <MX_GPIO_Init+0xa0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <MX_GPIO_Init+0xa0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <MX_GPIO_Init+0xa0>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <MX_GPIO_Init+0xa0>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|A2_Pin
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f64f 61e0 	movw	r1, #65248	@ 0xfee0
 8000abe:	4816      	ldr	r0, [pc, #88]	@ (8000b18 <MX_GPIO_Init+0xa4>)
 8000ac0:	f000 fb94 	bl	80011ec <HAL_GPIO_WritePin>
                          |B2_Pin|C2_Pin|D2_Pin|E2_Pin
                          |F2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|LED_RED2_Pin
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f247 017f 	movw	r1, #28799	@ 0x707f
 8000aca:	4814      	ldr	r0, [pc, #80]	@ (8000b1c <MX_GPIO_Init+0xa8>)
 8000acc:	f000 fb8e 	bl	80011ec <HAL_GPIO_WritePin>
                          |F_Pin|G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin A2_Pin
                           B2_Pin C2_Pin D2_Pin E2_Pin
                           F2_Pin G2_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|A2_Pin
 8000ad0:	f64f 63e0 	movw	r3, #65248	@ 0xfee0
 8000ad4:	60bb      	str	r3, [r7, #8]
                          |B2_Pin|C2_Pin|D2_Pin|E2_Pin
                          |F2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <MX_GPIO_Init+0xa4>)
 8000aea:	f000 fa03 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin D_Pin E_Pin
                           F_Pin G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LED_RED2_Pin
 8000aee:	f247 037f 	movw	r3, #28799	@ 0x707f
 8000af2:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|D_Pin|E_Pin
                          |F_Pin|G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2302      	movs	r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_GPIO_Init+0xa8>)
 8000b08:	f000 f9f4 	bl	8000ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <HAL_MspInit+0x40>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <HAL_MspInit+0x40>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_MspInit+0x40>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_MspInit+0x40>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_MspInit+0x40>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <HAL_MspInit+0x40>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f874 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff fff8 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bda:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a09      	ldr	r2, [pc, #36]	@ (8000c14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bf0:	4c09      	ldr	r4, [pc, #36]	@ (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f000 fef3 	bl	80019e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c02:	f7ff fe09 	bl	8000818 <main>
  bx lr
 8000c06:	4770      	bx	lr
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c10:	08001a74 	.word	0x08001a74
  ldr r2, =_sbss
 8000c14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c18:	2000002c 	.word	0x2000002c

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <HAL_Init+0x28>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <HAL_Init+0x28>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f92b 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff ff76 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f935 	bl	8000eda <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f90b 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a03      	ldr	r2, [pc, #12]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000028 	.word	0x20000028

08000cd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	@ (8000ce0 <HAL_GetTick+0x10>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	20000028 	.word	0x20000028

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff fff0 	bl	8000cd0 <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffe0 	bl	8000cd0 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff90 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff49 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff5e 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff90 	bl	8000de4 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5f 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffb0 	bl	8000e48 <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b08b      	sub	sp, #44	@ 0x2c
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	e161      	b.n	80011cc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 8150 	bne.w	80011c6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4a97      	ldr	r2, [pc, #604]	@ (8001188 <HAL_GPIO_Init+0x294>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d05e      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f30:	4a95      	ldr	r2, [pc, #596]	@ (8001188 <HAL_GPIO_Init+0x294>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d875      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f36:	4a95      	ldr	r2, [pc, #596]	@ (800118c <HAL_GPIO_Init+0x298>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d058      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f3c:	4a93      	ldr	r2, [pc, #588]	@ (800118c <HAL_GPIO_Init+0x298>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d86f      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f42:	4a93      	ldr	r2, [pc, #588]	@ (8001190 <HAL_GPIO_Init+0x29c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d052      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f48:	4a91      	ldr	r2, [pc, #580]	@ (8001190 <HAL_GPIO_Init+0x29c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d869      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f4e:	4a91      	ldr	r2, [pc, #580]	@ (8001194 <HAL_GPIO_Init+0x2a0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d04c      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f54:	4a8f      	ldr	r2, [pc, #572]	@ (8001194 <HAL_GPIO_Init+0x2a0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d863      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f5a:	4a8f      	ldr	r2, [pc, #572]	@ (8001198 <HAL_GPIO_Init+0x2a4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d046      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f60:	4a8d      	ldr	r2, [pc, #564]	@ (8001198 <HAL_GPIO_Init+0x2a4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d85d      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d82a      	bhi.n	8000fc0 <HAL_GPIO_Init+0xcc>
 8000f6a:	2b12      	cmp	r3, #18
 8000f6c:	d859      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f74 <HAL_GPIO_Init+0x80>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000fef 	.word	0x08000fef
 8000f78:	08000fc9 	.word	0x08000fc9
 8000f7c:	08000fdb 	.word	0x08000fdb
 8000f80:	0800101d 	.word	0x0800101d
 8000f84:	08001023 	.word	0x08001023
 8000f88:	08001023 	.word	0x08001023
 8000f8c:	08001023 	.word	0x08001023
 8000f90:	08001023 	.word	0x08001023
 8000f94:	08001023 	.word	0x08001023
 8000f98:	08001023 	.word	0x08001023
 8000f9c:	08001023 	.word	0x08001023
 8000fa0:	08001023 	.word	0x08001023
 8000fa4:	08001023 	.word	0x08001023
 8000fa8:	08001023 	.word	0x08001023
 8000fac:	08001023 	.word	0x08001023
 8000fb0:	08001023 	.word	0x08001023
 8000fb4:	08001023 	.word	0x08001023
 8000fb8:	08000fd1 	.word	0x08000fd1
 8000fbc:	08000fe5 	.word	0x08000fe5
 8000fc0:	4a76      	ldr	r2, [pc, #472]	@ (800119c <HAL_GPIO_Init+0x2a8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc6:	e02c      	b.n	8001022 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e029      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e024      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	623b      	str	r3, [r7, #32]
          break;
 8000fe2:	e01f      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	330c      	adds	r3, #12
 8000fea:	623b      	str	r3, [r7, #32]
          break;
 8000fec:	e01a      	b.n	8001024 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e013      	b.n	8001024 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d105      	bne.n	8001010 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001004:	2308      	movs	r3, #8
 8001006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	611a      	str	r2, [r3, #16]
          break;
 800100e:	e009      	b.n	8001024 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001010:	2308      	movs	r3, #8
 8001012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	615a      	str	r2, [r3, #20]
          break;
 800101a:	e003      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x130>
          break;
 8001022:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2bff      	cmp	r3, #255	@ 0xff
 8001028:	d801      	bhi.n	800102e <HAL_GPIO_Init+0x13a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	e001      	b.n	8001032 <HAL_GPIO_Init+0x13e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3304      	adds	r3, #4
 8001032:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2bff      	cmp	r3, #255	@ 0xff
 8001038:	d802      	bhi.n	8001040 <HAL_GPIO_Init+0x14c>
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x152>
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	3b08      	subs	r3, #8
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	210f      	movs	r1, #15
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	6a39      	ldr	r1, [r7, #32]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80a9 	beq.w	80011c6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001074:	4b4a      	ldr	r3, [pc, #296]	@ (80011a0 <HAL_GPIO_Init+0x2ac>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a49      	ldr	r2, [pc, #292]	@ (80011a0 <HAL_GPIO_Init+0x2ac>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <HAL_GPIO_Init+0x2ac>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800108c:	4a45      	ldr	r2, [pc, #276]	@ (80011a4 <HAL_GPIO_Init+0x2b0>)
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3d      	ldr	r2, [pc, #244]	@ (80011a8 <HAL_GPIO_Init+0x2b4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00d      	beq.n	80010d4 <HAL_GPIO_Init+0x1e0>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3c      	ldr	r2, [pc, #240]	@ (80011ac <HAL_GPIO_Init+0x2b8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x1dc>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a3b      	ldr	r2, [pc, #236]	@ (80011b0 <HAL_GPIO_Init+0x2bc>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_GPIO_Init+0x1d8>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e004      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010d4:	2300      	movs	r3, #0
 80010d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d8:	f002 0203 	and.w	r2, r2, #3
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	4093      	lsls	r3, r2
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010e6:	492f      	ldr	r1, [pc, #188]	@ (80011a4 <HAL_GPIO_Init+0x2b0>)
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001100:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	492b      	ldr	r1, [pc, #172]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	608b      	str	r3, [r1, #8]
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800110e:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	43db      	mvns	r3, r3
 8001116:	4927      	ldr	r1, [pc, #156]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001118:	4013      	ands	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	4921      	ldr	r1, [pc, #132]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	60cb      	str	r3, [r1, #12]
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001136:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	43db      	mvns	r3, r3
 800113e:	491d      	ldr	r1, [pc, #116]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001140:	4013      	ands	r3, r2
 8001142:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4917      	ldr	r1, [pc, #92]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	43db      	mvns	r3, r3
 8001166:	4913      	ldr	r1, [pc, #76]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 8001168:	4013      	ands	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01f      	beq.n	80011b8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	490d      	ldr	r1, [pc, #52]	@ (80011b4 <HAL_GPIO_Init+0x2c0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
 8001184:	e01f      	b.n	80011c6 <HAL_GPIO_Init+0x2d2>
 8001186:	bf00      	nop
 8001188:	10320000 	.word	0x10320000
 800118c:	10310000 	.word	0x10310000
 8001190:	10220000 	.word	0x10220000
 8001194:	10210000 	.word	0x10210000
 8001198:	10120000 	.word	0x10120000
 800119c:	10110000 	.word	0x10110000
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_GPIO_Init+0x2f4>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	43db      	mvns	r3, r3
 80011c0:	4909      	ldr	r1, [pc, #36]	@ (80011e8 <HAL_GPIO_Init+0x2f4>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	3301      	adds	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f47f ae96 	bne.w	8000f08 <HAL_GPIO_Init+0x14>
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	372c      	adds	r7, #44	@ 0x2c
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e272      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8087 	beq.w	800134a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800123c:	4b92      	ldr	r3, [pc, #584]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b04      	cmp	r3, #4
 8001246:	d00c      	beq.n	8001262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001248:	4b8f      	ldr	r3, [pc, #572]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	d112      	bne.n	800127a <HAL_RCC_OscConfig+0x5e>
 8001254:	4b8c      	ldr	r3, [pc, #560]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001260:	d10b      	bne.n	800127a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	4b89      	ldr	r3, [pc, #548]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d06c      	beq.n	8001348 <HAL_RCC_OscConfig+0x12c>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d168      	bne.n	8001348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e24c      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x76>
 8001284:	4b80      	ldr	r3, [pc, #512]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a7f      	ldr	r2, [pc, #508]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e02e      	b.n	80012f0 <HAL_RCC_OscConfig+0xd4>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x98>
 800129a:	4b7b      	ldr	r3, [pc, #492]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a7a      	ldr	r2, [pc, #488]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b78      	ldr	r3, [pc, #480]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a77      	ldr	r2, [pc, #476]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e01d      	b.n	80012f0 <HAL_RCC_OscConfig+0xd4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0xbc>
 80012be:	4b72      	ldr	r3, [pc, #456]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a71      	ldr	r2, [pc, #452]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0xd4>
 80012d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b68      	ldr	r3, [pc, #416]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a67      	ldr	r2, [pc, #412]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fcea 	bl	8000cd0 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fce6 	bl	8000cd0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	@ 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e200      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b5d      	ldr	r3, [pc, #372]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xe4>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fcd6 	bl	8000cd0 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fcd2 	bl	8000cd0 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1ec      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b53      	ldr	r3, [pc, #332]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x10c>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d063      	beq.n	800141e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001356:	4b4c      	ldr	r3, [pc, #304]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001362:	4b49      	ldr	r3, [pc, #292]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b08      	cmp	r3, #8
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x18c>
 800136e:	4b46      	ldr	r3, [pc, #280]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x176>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1c0      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b3d      	ldr	r3, [pc, #244]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4939      	ldr	r1, [pc, #228]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e03a      	b.n	800141e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <HAL_RCC_OscConfig+0x270>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fc8b 	bl	8000cd0 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fc87 	bl	8000cd0 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1a1      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4927      	ldr	r1, [pc, #156]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <HAL_RCC_OscConfig+0x270>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc6a 	bl	8000cd0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fc66 	bl	8000cd0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e180      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d03a      	beq.n	80014a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d019      	beq.n	8001466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_RCC_OscConfig+0x274>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001438:	f7ff fc4a 	bl	8000cd0 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fc46 	bl	8000cd0 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e160      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f000 fa9c 	bl	800199c <RCC_Delay>
 8001464:	e01c      	b.n	80014a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_RCC_OscConfig+0x274>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fc30 	bl	8000cd0 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001472:	e00f      	b.n	8001494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fc2c 	bl	8000cd0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e146      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	42420000 	.word	0x42420000
 8001490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001494:	4b92      	ldr	r3, [pc, #584]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1e9      	bne.n	8001474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a6 	beq.w	80015fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b2:	4b8b      	ldr	r3, [pc, #556]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10d      	bne.n	80014da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b88      	ldr	r3, [pc, #544]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a87      	ldr	r2, [pc, #540]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b85      	ldr	r3, [pc, #532]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b82      	ldr	r3, [pc, #520]	@ (80016e4 <HAL_RCC_OscConfig+0x4c8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b7f      	ldr	r3, [pc, #508]	@ (80016e4 <HAL_RCC_OscConfig+0x4c8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7e      	ldr	r2, [pc, #504]	@ (80016e4 <HAL_RCC_OscConfig+0x4c8>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbed 	bl	8000cd0 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fbe9 	bl	8000cd0 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b64      	cmp	r3, #100	@ 0x64
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e103      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b75      	ldr	r3, [pc, #468]	@ (80016e4 <HAL_RCC_OscConfig+0x4c8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x312>
 8001520:	4b6f      	ldr	r3, [pc, #444]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a6e      	ldr	r2, [pc, #440]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	e02d      	b.n	800158a <HAL_RCC_OscConfig+0x36e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x334>
 8001536:	4b6a      	ldr	r3, [pc, #424]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4a69      	ldr	r2, [pc, #420]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	4b67      	ldr	r3, [pc, #412]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a66      	ldr	r2, [pc, #408]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	e01c      	b.n	800158a <HAL_RCC_OscConfig+0x36e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d10c      	bne.n	8001572 <HAL_RCC_OscConfig+0x356>
 8001558:	4b61      	ldr	r3, [pc, #388]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4a60      	ldr	r2, [pc, #384]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6213      	str	r3, [r2, #32]
 8001564:	4b5e      	ldr	r3, [pc, #376]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a5d      	ldr	r2, [pc, #372]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	e00b      	b.n	800158a <HAL_RCC_OscConfig+0x36e>
 8001572:	4b5b      	ldr	r3, [pc, #364]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4a5a      	ldr	r2, [pc, #360]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6213      	str	r3, [r2, #32]
 800157e:	4b58      	ldr	r3, [pc, #352]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a57      	ldr	r2, [pc, #348]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d015      	beq.n	80015be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fb9d 	bl	8000cd0 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fb99 	bl	8000cd0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0b1      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	4b4b      	ldr	r3, [pc, #300]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ee      	beq.n	800159a <HAL_RCC_OscConfig+0x37e>
 80015bc:	e014      	b.n	80015e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fb87 	bl	8000cd0 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fb83 	bl	8000cd0 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e09b      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ee      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a3b      	ldr	r2, [pc, #236]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8087 	beq.w	8001712 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001604:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b08      	cmp	r3, #8
 800160e:	d061      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d146      	bne.n	80016a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <HAL_RCC_OscConfig+0x4cc>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fb57 	bl	8000cd0 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fb53 	bl	8000cd0 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e06d      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001638:	4b29      	ldr	r3, [pc, #164]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800164c:	d108      	bne.n	8001660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800164e:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	4921      	ldr	r1, [pc, #132]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a19      	ldr	r1, [r3, #32]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	430b      	orrs	r3, r1
 8001672:	491b      	ldr	r1, [pc, #108]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x4cc>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fb27 	bl	8000cd0 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fb23 	bl	8000cd0 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x46a>
 80016a4:	e035      	b.n	8001712 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_RCC_OscConfig+0x4cc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb10 	bl	8000cd0 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fb0c 	bl	8000cd0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e026      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x498>
 80016d2:	e01e      	b.n	8001712 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d107      	bne.n	80016ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e019      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40007000 	.word	0x40007000
 80016e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_RCC_OscConfig+0x500>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0d0      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b6a      	ldr	r3, [pc, #424]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d910      	bls.n	8001764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b67      	ldr	r3, [pc, #412]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 0207 	bic.w	r2, r3, #7
 800174a:	4965      	ldr	r1, [pc, #404]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a58      	ldr	r2, [pc, #352]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a52      	ldr	r2, [pc, #328]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800179e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d040      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d115      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b41      	ldr	r3, [pc, #260]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e073      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06b      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4936      	ldr	r1, [pc, #216]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fa5e 	bl	8000cd0 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fa5a 	bl	8000cd0 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e053      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d210      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 0207 	bic.w	r2, r3, #7
 8001856:	4922      	ldr	r1, [pc, #136]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1cc>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1d0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f9bc 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	08001a48 	.word	0x08001a48
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x94>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b04      	cmp	r3, #4
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x30>
 800191e:	2b08      	cmp	r3, #8
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x36>
 8001922:	e027      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_RCC_GetSysClockFreq+0x98>)
 8001926:	613b      	str	r3, [r7, #16]
      break;
 8001928:	e027      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001934:	5cd3      	ldrb	r3, [r2, r3]
 8001936:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d010      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x94>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0c5b      	lsrs	r3, r3, #17
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xa0>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <HAL_RCC_GetSysClockFreq+0x98>)
 8001956:	fb03 f202 	mul.w	r2, r3, r2
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e004      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	613b      	str	r3, [r7, #16]
      break;
 8001972:	e002      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_RCC_GetSysClockFreq+0x98>)
 8001976:	613b      	str	r3, [r7, #16]
      break;
 8001978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197a:	693b      	ldr	r3, [r7, #16]
}
 800197c:	4618      	mov	r0, r3
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	007a1200 	.word	0x007a1200
 8001990:	08001a58 	.word	0x08001a58
 8001994:	08001a68 	.word	0x08001a68
 8001998:	003d0900 	.word	0x003d0900

0800199c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <RCC_Delay+0x34>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <RCC_Delay+0x38>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a5b      	lsrs	r3, r3, #9
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b8:	bf00      	nop
  }
  while (Delay --);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e5a      	subs	r2, r3, #1
 80019be:	60fa      	str	r2, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f9      	bne.n	80019b8 <RCC_Delay+0x1c>
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000000 	.word	0x20000000
 80019d4:	10624dd3 	.word	0x10624dd3

080019d8 <memset>:
 80019d8:	4603      	mov	r3, r0
 80019da:	4402      	add	r2, r0
 80019dc:	4293      	cmp	r3, r2
 80019de:	d100      	bne.n	80019e2 <memset+0xa>
 80019e0:	4770      	bx	lr
 80019e2:	f803 1b01 	strb.w	r1, [r3], #1
 80019e6:	e7f9      	b.n	80019dc <memset+0x4>

080019e8 <__libc_init_array>:
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	2600      	movs	r6, #0
 80019ec:	4d0c      	ldr	r5, [pc, #48]	@ (8001a20 <__libc_init_array+0x38>)
 80019ee:	4c0d      	ldr	r4, [pc, #52]	@ (8001a24 <__libc_init_array+0x3c>)
 80019f0:	1b64      	subs	r4, r4, r5
 80019f2:	10a4      	asrs	r4, r4, #2
 80019f4:	42a6      	cmp	r6, r4
 80019f6:	d109      	bne.n	8001a0c <__libc_init_array+0x24>
 80019f8:	f000 f81a 	bl	8001a30 <_init>
 80019fc:	2600      	movs	r6, #0
 80019fe:	4d0a      	ldr	r5, [pc, #40]	@ (8001a28 <__libc_init_array+0x40>)
 8001a00:	4c0a      	ldr	r4, [pc, #40]	@ (8001a2c <__libc_init_array+0x44>)
 8001a02:	1b64      	subs	r4, r4, r5
 8001a04:	10a4      	asrs	r4, r4, #2
 8001a06:	42a6      	cmp	r6, r4
 8001a08:	d105      	bne.n	8001a16 <__libc_init_array+0x2e>
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
 8001a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a10:	4798      	blx	r3
 8001a12:	3601      	adds	r6, #1
 8001a14:	e7ee      	b.n	80019f4 <__libc_init_array+0xc>
 8001a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1a:	4798      	blx	r3
 8001a1c:	3601      	adds	r6, #1
 8001a1e:	e7f2      	b.n	8001a06 <__libc_init_array+0x1e>
 8001a20:	08001a6c 	.word	0x08001a6c
 8001a24:	08001a6c 	.word	0x08001a6c
 8001a28:	08001a6c 	.word	0x08001a6c
 8001a2c:	08001a70 	.word	0x08001a70

08001a30 <_init>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	bf00      	nop
 8001a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a36:	bc08      	pop	{r3}
 8001a38:	469e      	mov	lr, r3
 8001a3a:	4770      	bx	lr

08001a3c <_fini>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	bf00      	nop
 8001a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a42:	bc08      	pop	{r3}
 8001a44:	469e      	mov	lr, r3
 8001a46:	4770      	bx	lr
